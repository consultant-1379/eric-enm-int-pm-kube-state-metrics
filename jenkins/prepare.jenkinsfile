#!/usr/bin/env groovy

def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.0-1'

def bob = new BobCommand()
         .bobImage(defaultBobImage)
         .needDockerSocket(true)
         .toString()

pipeline {
    options {
        disableConcurrentBuilds()
    }
    agent {
            node
            {
               label SLAVE
            }
        }
    parameters {
        string(name: 'CHART_NAME', defaultValue: 'eric-pm-kube-state-metrics', description: 'Chart name e.g.: eric-pm-kube-state-metrics')
        string(name: 'CHART_REPO', defaultValue: 'https://arm.seli.gic.ericsson.se/artifactory/proj-adp-pm-kube-state-metrics-released-helm-local/', description: 'Chart repo e.g.: https://arm.seli.gic.ericsson.se/artifactory/proj-adp-pm-kube-state-metrics-released-helm-local/')
        string(name: 'CHART_VERSION', defaultValue: '', description: 'Chart version e.g.: 2.7.0+5')
        string(name: 'INT_ENM_CHART', defaultValue: 'eric-enm-int-pm-kube-state-metrics', description: 'eric-enm-int-pm-kube-state-metrics')
        string(name: 'GERRIT_REFSPEC', defaultValue: '')
    }
    stages {
       stage('Clean') {
            steps {
                 sh "${bob} -r ruleset2.0.yaml clean"
            }
        }
       stage('Inject Credential Files') {
        steps {
            withCredentials([file(credentialsId: 'lciadm100-docker-auth', variable: 'dockerConfig')]) {
                sh "install -m 600 ${dockerConfig} ${HOME}/.docker/config.json"
            }
        }
    }
        stage('Prepare Helm Chart') {
            steps {
               script{
                      withCredentials([usernamePassword(credentialsId: 'cenmbuild_gerrit_api_token', usernameVariable: 'GERRIT_USERNAME', passwordVariable: 'GERRIT_PASSWORD'),
                                       string(credentialsId: 'lciadm100', variable: 'ARM_API_TOKEN'),
                      file(credentialsId: 'cenm_repo_credentials', variable: 'HELM_REPO_CREDENTIALS')])
                      {
                      def bobwithprepare = new BobCommand()
                         .bobImage(defaultBobImage)
                         .needDockerSocket(true)
                         .envVars(['CHART_NAME': env.CHART_NAME,
                                   'CHART_REPO': env.CHART_REPO,
                                   'CHART_VERSION': env.CHART_VERSION,
                                   'ARM_API_TOKEN': env.ARM_API_TOKEN,
                                   'GERRIT_USERNAME': env.GERRIT_USERNAME,
                                   'GERRIT_PASSWORD': env.GERRIT_PASSWORD,
                                   'HELM_REPO_CREDENTIALS': env.HELM_REPO_CREDENTIALS,
                                   'HELM_INTERNAL_REPO': env.HELM_INTERNAL_REPO,
                                   'INT_ENM_CHART': env.INT_ENM_CHART,
                                   'HELM_DROP_REPO': env.HELM_DROP_REPO,
                                   'HELM_RELEASED_REPO': env.HELM_RELEASED_REPO
                         ])
                         .toString()
                    sh "chmod -R 777 ${WORKSPACE}@tmp"
                    sh "${bobwithprepare}  -r ruleset2.0.yaml prepare"
                   }
                }
             }
            }
        stage('Archive artifact.properties') {
            steps {
                archiveArtifacts 'artifact.properties'
            }
          }
        }
    post {
         always {
           script{
             currentBuild.displayName = "${INT_ENM_CHART}"
           }
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy
@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -> "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |\$(if [ -n "\$HELM_REPO_CREDENTIALS" ]; then echo -v \$HELM_REPO_CREDENTIALS:\$HELM_REPO_CREDENTIALS;fi)
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}
